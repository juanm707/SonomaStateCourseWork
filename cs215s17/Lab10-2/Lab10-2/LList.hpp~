#ifndef LLIST_HPP
#define LLIST_HPP

#include <iostream>
using namespace std;

enum dtype { FORWARD, BACKWARD };

template <class LT> class LList;
template <class LT> ostream & operator << (ostream & outs, const LList<LT> & L);
template <class LT>

class LList
{
   private:
      class LNode
      {
      public:
         LNode ();
	 void PrintNode (ostream & output);
         LT data;
         LNode * next;
      };
  
   public:
      LList ();
      LList (const LList & other);
      ~LList ();
      LList & operator = (const LList & other);
      bool operator == (const LList & other);
      int Size () const;

  void SetDirection (dtype dir);
  dtype GetDirection () const;
  friend ostream & operator << <> (ostream & outs, const LList<LT> & L);
  
      bool InsertFirst (const LT & value);
      bool InsertLast (const LT & value);
      bool DeleteFirst ();
      bool DeleteLast ();

  void Forward (void function (const LT & param));
  
   private:
      LNode * first;
      int size;
      dtype direction;
};

//#include LList.h

template <class LT>
LList<LT>::LNode::LNode ()
{ // This function will set value of next to NULL.
 
  next = NULL;
}

template <class LT>
void LList<LT>::LNode::PrintNode (ostream & output)
{
  if (next != NULL)
    {
      next->PrintNode (output);
    }

  if (next != NULL)
    {
      output << ' ';
    }

  output << data;
}

template <class LT>
LList<LT>::LList ()
{ // This function will set value of size to 0 and value of first to NULL.
  first = NULL;
  size = 0;
  direction = FORWARD;
}

template <class LT>
LList<LT>::LList (const LList & other)
{ // This function is the copy constructor and set value of size to 0, first to NULL and copy data of a list into another list.
  size = 0;
  first = NULL;

  /*LNode* np = other.first;
  
  while(np != NULL)
    {
      InsertLast(np->data);
      np = np->next;
      }*/
  
  for (LNode * n = other.first; n != NULL; n = n->next)
    {
      InsertLast (n->data);
    }
  direction = other.direction;
  
}

template <class LT>
LList<LT>::~LList ()
{ // This function will delete the first item in the list

  while (first)
    {
      DeleteFirst();
    }
}

template <class LT>
LList<LT> & LList<LT>::operator = (const LList<LT> & other)
{ // This function will check for self assignment.
  if (this == &other)
    {
      return * this;
    }

  while (first)
    {
      DeleteFirst();
    }
  for (LNode* n = other.first; n != NULL; n = n->next)
    {
      InsertLast(n->data);
    }
  direction = other.direction;
  return * this;
}

template <class LT>
bool LList<LT>::operator == (const LList & other)
{ // This function will check for equality between two lists.
  if (size != other.size)
    {
      return false;
    }
  
  int i = 0;

  LNode* np = first;
  LNode* op = other.first;
  
  while (i < size)
    {
      if (np->data != op->data)
	{
	  return false;
	}

      np = np->next;
      op = op->next;

      i++;
    }

  return true;
  
}

template <class LT>
int LList<LT>::Size () const
{ // This function will return the value of size.
  return size;
}

template <class LT>
void LList<LT>::SetDirection (dtype dir)
{
  direction = dir;
}

template <class LT>
dtype LList<LT>::GetDirection () const
{
  return direction;
}

template <class LT>
ostream & operator << (ostream & outs, const LList<LT> & L)
{ // This function will traverse the list, output the data values, and return outs.

  if (L.firt == NULL)
    return outs;
  
  if (L.direction == FORWARD)
    {//Print the list from beginning (first) to end
      outs << L.first->data;

      typename LList<LT>::LNode* n;
      for (n = L.first->next; n != NULL; n = n->next)
	outs << ' ' << n->data;
    }
  
  else //L.direction == BACKWARD
    {//Print the list from end to beginning
      L.first->PrintNode(outs);
    }

  return outs;
  
}

template <class LT>
bool LList<LT>::InsertFirst (const LT & value)
{ // This function will allocate space for a new node. False if space cannot be allocated.
  // Set data of the new node to the input value, set the next of the new node to the current first.
  // Set the first of the list to the new node. Increment the size of the list, and return true.

  LNode* nw = new LNode;

  if (nw == NULL)
    {
      return false;
    }
  
  nw->data = value;
  nw->next = first;
  first = nw;
  size++;

  return true;
}

template <class LT>
bool LList<LT>::InsertLast (const LT & value)
{ // This function will insert a value at the end of list.

  if (size == 0)
    {
      return InsertFirst(value);
    }
  
  LNode* nw = new LNode;
  LNode* np = first;
  LNode* last = NULL;
  
  if (nw == NULL)
    {
      return false;
    }

  nw->data = value;
  nw->next = NULL;

  while (np != NULL)
    {
      last = np;
      np = np->next;
    }

  last->next = nw;
  size++;
  return true;
  
}

template <class LT>
bool LList<LT>::DeleteFirst ()
{ // This function will delete the first value.

  if (size == 0)
    {
      return false;
    }

  LNode* temp = first;
  first = first->next;
  delete temp;
  size--;
  return true;
  
}

template <class LT>
bool LList<LT>::DeleteLast ()
{ // This function will delete the last value.

  if (size == 0)
    {
      return false;
    }

  if (size == 1)
    {
      return DeleteFirst();
    }

  LNode* temp = first;
  LNode* secLast = NULL; 
  
  while (temp->next != NULL)
    {
      secLast = temp;
      temp = temp->next;
     
    }

  secLast->next = NULL;
  delete temp;
  size--;
  return true;
  
}

template <class LT>
void LList<LT>::Forward (void function (const LT & param))
{
  for (LNode* n = first; n; n = n = n ->next)
    function (n->data);

}

#endif

